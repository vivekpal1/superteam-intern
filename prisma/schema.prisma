// prisma/schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Document {
  id        String   @id @default(cuid())
  content   String   @db.Text
  embedding Unsupported("vector(1536)") 
  metadata  Json
  type      String
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  uploadedBy String
}

model Member {
  id            String         @id @default(cuid())
  name          String
  skills        String[]
  experience    String
  bio           String
  twitterHandle String?
  githubHandle  String?
  contact       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Add these relation fields
  projects      Project[]      // One member can have many projects
  achievements  Achievement[]  // One member can have many achievements
  contributions Contribution[] // One member can have many contributions
}

model Project {
    id          String   @id @default(cuid())
    name        String
    type        String   // Project type/category
    description String
    skills      String[] // Required skills
    member      Member   @relation(fields: [memberId], references: [id])
    memberId    String
    startDate   DateTime
    endDate     DateTime?
    status      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Achievement {
    id          String   @id @default(cuid())
    title       String
    description String
    date        DateTime
    member      Member   @relation(fields: [memberId], references: [id])
    memberId    String
    type        String   // Achievement type
    proof       String?  // URL or other verification
    createdAt   DateTime @default(now())
}

model Contribution {
    id          String   @id @default(cuid())
    description String
    date        DateTime
    member      Member   @relation(fields: [memberId], references: [id])
    memberId    String
    type        String   // Contribution type
    url         String?  // Link to contribution
    createdAt   DateTime @default(now())
}

model Tweet {
  id           String    @id @default(cuid())
  content      String
  status       String    @default("draft")
  authorId     String
  scheduledFor DateTime?
  postedAt     DateTime?
  twitterId    String?
  metadata     Json
  analytics    Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Conversation {
    id        String   @id @default(cuid())
    userId    String
    messages  Json[]   // Store conversation history
    metadata  Json?    // Store context, intent, etc.
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}